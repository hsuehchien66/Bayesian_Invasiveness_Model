assign(gpsc_amr_plot_variable, new_gpsc_amr_plot)
}
wid <- rep(0.8/30, 30)
png("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/AMR_plot_TWN.png", width = 9500, height = 500)
plot_grid(left_amr_ggplot, GPSC_2_amr_plot, GPSC_3_amr_plot,
GPSC_4_amr_plot, GPSC_5_amr_plot, GPSC_6_amr_plot,
GPSC_7_amr_plot, GPSC_8_amr_plot, GPSC_9_amr_plot,
GPSC_10_amr_plot, GPSC_12_amr_plot, GPSC_13_amr_plot,
GPSC_15_amr_plot, GPSC_16_amr_plot, GPSC_18_amr_plot,
GPSC_23_amr_plot, GPSC_26_amr_plot, GPSC_31_amr_plot,
GPSC_32_amr_plot, GPSC_37_amr_plot, GPSC_44_amr_plot,
GPSC_47_amr_plot, GPSC_50_amr_plot, GPSC_61_amr_plot,
GPSC_70_amr_plot, GPSC_95_amr_plot, GPSC_113_amr_plot,
GPSC_386_amr_plot, GPSC_657_amr_plot, GPSC_Others_amr_plot,
align="h", ncol=30, rel_widths = c(1.5/30, wid))
dev.off()
png("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/AMR_plot_TWN.png", width = 9500, height = 500)
plot_grid(left_amr_ggplot, GPSC_3_amr_plot,
GPSC_4_amr_plot, GPSC_5_amr_plot, GPSC_6_amr_plot,
GPSC_9_amr_plot,
GPSC_12_amr_plot,
GPSC_14_amr_plot, GPSC_16_amr_plot, GPSC_18_amr_plot,
GPSC_23_amr_plot, GPSC_38_amr_plot,
GPSC_45_amr_plot, GPSC_59_amr_plot, GPSC_69_amr_plot,
GPSC_106_amr_plot, GPSC_122_amr_plot, GPSC_152_amr_plot,
GPSC_162_amr_plot, GPSC_Others_amr_plot,
align="h", ncol=30, rel_widths = c(1.5/30, wid))
dev.off()
png("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/AMR_plot_TWN.png", width = 7500, height = 500)
plot_grid(left_amr_ggplot, GPSC_3_amr_plot,
GPSC_4_amr_plot, GPSC_5_amr_plot, GPSC_6_amr_plot,
GPSC_9_amr_plot,
GPSC_12_amr_plot,
GPSC_14_amr_plot, GPSC_16_amr_plot, GPSC_18_amr_plot,
GPSC_23_amr_plot, GPSC_38_amr_plot,
GPSC_45_amr_plot, GPSC_59_amr_plot, GPSC_69_amr_plot,
GPSC_106_amr_plot, GPSC_122_amr_plot, GPSC_152_amr_plot,
GPSC_162_amr_plot, GPSC_Others_amr_plot,
align="h", ncol=30, rel_widths = c(1.5/30, wid))
dev.off()
png("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/AMR_plot_TWN.png", width = 3500, height = 500)
plot_grid(left_amr_ggplot, GPSC_3_amr_plot,
GPSC_4_amr_plot, GPSC_5_amr_plot, GPSC_6_amr_plot,
GPSC_9_amr_plot,
GPSC_12_amr_plot,
GPSC_14_amr_plot, GPSC_16_amr_plot, GPSC_18_amr_plot,
GPSC_23_amr_plot, GPSC_38_amr_plot,
GPSC_45_amr_plot, GPSC_59_amr_plot, GPSC_69_amr_plot,
GPSC_106_amr_plot, GPSC_122_amr_plot, GPSC_152_amr_plot,
GPSC_162_amr_plot, GPSC_Others_amr_plot,
align="h", ncol=30, rel_widths = c(1.5/30, wid))
dev.off()
png("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/AMR_plot_TWN.png", width = 6500, height = 700)
plot_grid(left_amr_ggplot, GPSC_3_amr_plot,
GPSC_4_amr_plot, GPSC_5_amr_plot, GPSC_6_amr_plot,
GPSC_9_amr_plot,
GPSC_12_amr_plot,
GPSC_14_amr_plot, GPSC_16_amr_plot, GPSC_18_amr_plot,
GPSC_23_amr_plot, GPSC_38_amr_plot,
GPSC_45_amr_plot, GPSC_59_amr_plot, GPSC_69_amr_plot,
GPSC_106_amr_plot, GPSC_122_amr_plot, GPSC_152_amr_plot,
GPSC_162_amr_plot, GPSC_Others_amr_plot,
align="h", ncol=30, rel_widths = c(1.5/30, wid))
dev.off()
png("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/AMR_plot_TWN.png", width = 6500, height = 600)
plot_grid(left_amr_ggplot, GPSC_3_amr_plot,
GPSC_4_amr_plot, GPSC_5_amr_plot, GPSC_6_amr_plot,
GPSC_9_amr_plot,
GPSC_12_amr_plot,
GPSC_14_amr_plot, GPSC_16_amr_plot, GPSC_18_amr_plot,
GPSC_23_amr_plot, GPSC_38_amr_plot,
GPSC_45_amr_plot, GPSC_59_amr_plot, GPSC_69_amr_plot,
GPSC_106_amr_plot, GPSC_122_amr_plot, GPSC_152_amr_plot,
GPSC_162_amr_plot, GPSC_Others_amr_plot,
align="h", ncol=20, rel_widths = c(1.5/30, wid))
dev.off()
AMR_percentage_df_long
tibble = read.csv(file_path)
file_path <- "/Users/hc14/Documents/GPS_collaborator/Taiwan/NHRI/Analysis/GPS_Taiwan_illumina_137samples_metadata.csv"
tibble = read.csv(file_path)
data_frame = as.data.frame(tibble)
head(data_frame)
file_path <- "/Users/hc14/Documents/GPS_collaborator/Taiwan/NHRI/Analysis/GPS_Taiwan_illumina_137samples_metadata.csv"
# file_path <- "GPS_Taiwan_illumina_136samples_metadata_for_plot.xlsx"
tibble = read.csv(file_path)
data_frame = as.data.frame(tibble)
## change GPSC strain "_" to "Others", strain "904;9" to "9"
## change Serotype "_" to "Others"
data_frame[which(data_frame$GPSC == "_"), "GPSC"] <- "Others"
data_frame[which(data_frame$GPSC == "904;9"), "GPSC"] <- "9"
data_frame[which(data_frame$Serotype.x == "_"), "Serotype.x"] <- "NT"
## Might need a script for assigning Vaccine Period
metadata_df <- data_frame
## function
percent_amr <- function(amr_df, amr, ris=c("I", "R")){
num_pen_men_r <- length(which(amr_df[,amr] %in% ris))
pen_men_percent <- num_pen_men_r/nrow(amr_df)
}
## Select necessary columns:
## WGS_ERY_SIR, WGS_CHL_SIR, WGS_TET_SIR, mefA, ermB
AMR_data_frame <- data_frame[,c("GPSC", "PEN_Res.Meningital.",
"PEN_Res.Non.meningital.", "MER_Res", "TET_Res", "ERY_Res", "FQ_Res")]
target_gpsc <- c("1", "2", "3", "4", "5", "6" ,"7", "8", "9", "10", "12", "13", "15", "16", "18", "23", "26", "31",
"32", "37", "44", "47", "50", "61", "70", "95", "113", "386", "657")
AMR_data_frame_merge_gpsc <- AMR_data_frame
AMR_data_frame_merge_gpsc[which(!AMR_data_frame_merge_gpsc$GPSC %in% target_gpsc), "GPSC"] <- "Others"
output_colnames <- c("GPSC", "PEN_MEN", "PEN_NMEN","MEM", "TET", "ERY", "FQ")
unique_gpsc <- unique(AMR_data_frame_merge_gpsc$GPSC)
dsize <- matrix(0, nrow = length(unique_gpsc), ncol = 7)
AMR_percentage_df <- as.data.frame(dsize)
colnames(AMR_percentage_df ) <- output_colnames
IR <- c("I", "R")
for (i in 1:length(unique_gpsc)){
gpsci <- unique_gpsc[i]
gpsc_df <- AMR_data_frame_merge_gpsc[which(AMR_data_frame_merge_gpsc$GPSC == gpsci),]
#PEN_MEN
percent_PEN_MEN <- percent_amr(amr_df = gpsc_df, amr = "PEN_Res.Meningital.",ris = IR)
#mefA
percent_PEN_NMEN <- percent_amr(amr_df = gpsc_df, amr = "PEN_Res.Non.meningital.",ris = IR)
#ermB
percent_MEM <- percent_amr(amr_df = gpsc_df, amr = "MER_Res",ris = IR)
#CHL
percent_TET <- percent_amr(amr_df = gpsc_df, amr = "TET_Res",ris = IR)
#TET
percent_ERY <- percent_amr(amr_df = gpsc_df, amr = "ERY_Res",ris = IR)
#COT
percent_FQ <- percent_amr(amr_df = gpsc_df, amr = "FQ_Res",ris = IR)
AMR_percentage_df[i, "GPSC"] <- gpsci
AMR_percentage_df[i, "PEN_MEN"] <- percent_PEN_MEN
AMR_percentage_df[i, "MEM"] <- percent_MEM
AMR_percentage_df[i, "TET"] <- percent_TET
AMR_percentage_df[i, "FQ"] <- percent_FQ
AMR_percentage_df[i, "PEN_NMEN"] <- percent_PEN_NMEN
AMR_percentage_df[i, "ERY"] <- percent_ERY
}
AMR_percentage_df_long <- AMR_percentage_df %>% gather(AMR, Percentage, PEN_MEN:ERY)
### set GPSC order
AMR_order <- c("PEN_MEN", "PEN_NMEN", "MEM", "TET", "ERY", "FQ")
AMR_percentage_df_long$AMR <- factor(AMR_percentage_df_long$AMR, levels=AMR_order)
GPSC1_amr <- AMR_percentage_df_long[which(AMR_percentage_df_long$GPSC=="1"),]
left_amr_ggplot <-
ggplot(GPSC1_amr, aes(x=AMR, y=Percentage)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
scale_y_continuous(
limits = c(0,1.2),
breaks = seq(0,1,by=0.5)
)+
coord_flip() +
xlab("") +
theme_bw()+
labs(x=NULL, y=NULL)+
ggtitle("GPSC1")+
theme(
axis.text.y = element_text(size = 50),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 50),
plot.title = element_text(size = 50)
)
gpscs <- c("3", "4", "5", "6" , "9", "12", "14", "16", "18", "23", "38", "45", "59", "69", "106", "122", "152", "162", "Others")
for (i in 1:length(gpscs)){
gpsc_variable <- paste0("GPSC_", gpscs[i], "_amr")
assign(gpsc_variable, AMR_percentage_df_long[which(AMR_percentage_df_long$GPSC== gpscs[i]),])
gpsc_amr_plot_variable <- paste0(gpsc_variable, "_plot")
gpsc_title <- paste0("GPSC", gpscs[i])
new_gpsc_amr_plot <-
ggplot(get(gpsc_variable), aes(x=AMR, y=Percentage)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
scale_y_continuous(
limits = c(0,1.2),
breaks = seq(0,1,by=0.5),
labels = label_number(accuracy=0.1)
)+
coord_flip() +
labs(x=NULL, y=NULL) +
ggtitle(gpsc_title)+
theme_bw()+
theme(
axis.text.y = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 50),
plot.title = element_text(size = 50))
assign(gpsc_amr_plot_variable, new_gpsc_amr_plot)
}
wid <- rep(0.8/30, 30)
png("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/AMR_plot_TWN.png", width = 6500, height = 600)
plot_grid(left_amr_ggplot, GPSC_3_amr_plot,
GPSC_4_amr_plot, GPSC_5_amr_plot, GPSC_6_amr_plot,
GPSC_9_amr_plot,
GPSC_12_amr_plot,
GPSC_14_amr_plot, GPSC_16_amr_plot, GPSC_18_amr_plot,
GPSC_23_amr_plot, GPSC_38_amr_plot,
GPSC_45_amr_plot, GPSC_59_amr_plot, GPSC_69_amr_plot,
GPSC_106_amr_plot, GPSC_122_amr_plot, GPSC_152_amr_plot,
GPSC_162_amr_plot, GPSC_Others_amr_plot,
align="h", ncol=20, rel_widths = c(1.5/30, wid))
dev.off()
### Questions
# whether need to fix x-axis (GPSC)
# how many AMR to show
#### problems should be resolved
# serotype calling "_"
# serotype 06A, 06C, 09V, 06B
### R plot for figure 2
library(ggplot2)
library(ggpattern)
library(readxl)
### Function
Generate_GPSC_Serotype_Vaccine_freqtable <- function(metadata_df,
pair_colname1="GPSC", pair_colname2="Serotype.x", pair_colname3="vac_period",
n_output_col=6,
output_colnames=c("GPSC", "Serotype", "Vaccine_Period", "Count", "Proportion", "Pair_Name")){
for(isolate in 1:nrow(metadata_df)){
metadata_df[isolate, "pair"] = paste(metadata_df[isolate, pair_colname1],
metadata_df[isolate, pair_colname2],
metadata_df[isolate, pair_colname3], sep = "_")
}
pair_freq <- as.data.frame(table(metadata_df$pair))
colnames(pair_freq) <- c("name", "freq")
dsize <- matrix(0, nrow = nrow(pair_freq), ncol = n_output_col)
gpsc_sero_vacperiod_df = as.data.frame(dsize)
colnames(gpsc_sero_vacperiod_df ) <- output_colnames
for (i in 1:nrow(pair_freq)) {
gpsc = strsplit(as.character(pair_freq[i,1]), "_")[[1]][1]
pair_freq$gpsc[i] = gpsc
sero = strsplit(as.character(pair_freq[i,1]),"_")[[1]][2]
vac_period = strsplit(as.character(pair_freq[i,1]),"_")[[1]][3]
gpsc_sero_vacperiod_df[i, "GPSC"] = gpsc
gpsc_sero_vacperiod_df[i, "Serotype"] = sero
gpsc_sero_vacperiod_df[i, "Vaccine_Period"] = vac_period
gpsc_sero_vacperiod_df[i, "Pair_Name"] = as.character(pair_freq[i, "name"])
}
uniq_pair = unique(metadata_df$pair)
### each row is a population-serotype-gpsc pair
num_pre_vac = length(which(metadata_df$vac_period == "pre-PCV13"))
num_post_vac = length(which(metadata_df$vac_period == "post-PCV13"))
for (p in uniq_pair){
selected_pair = metadata_df[which(metadata_df$pair == p),]
t_count = nrow(selected_pair)
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Count"] = t_count
if(gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Vaccine_Period"] == "pre-PCV13"){
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Proportion"] = t_count/num_pre_vac
}else{
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Proportion"] = t_count/num_post_vac
}
}
return(gpsc_sero_vacperiod_df)
}
# load data
file_path <- "/Users/hc14/Documents/GPS_collaborator/Taiwan/NHRI/Analysis/GPS_Taiwan_illumina_136samples_metadata_for_plot.xlsx"
# file_path <- "GPS_Taiwan_illumina_136samples_metadata_for_plot.xlsx"
tibble = readxl::read_excel(file_path, sheet=1)
data_frame = as.data.frame(tibble)
## change GPSC strain "_" to "Others", strain "904;9" to "9"
## change Serotype "_" to "Others"
data_frame[which(data_frame$GPSC == "_"), "GPSC"] <- "Others"
data_frame[which(data_frame$GPSC == "904;9"), "GPSC"] <- "9"
data_frame[which(data_frame$Serotype.x == "_"), "Serotype.x"] <- "NT"
## Might need a script for assigning Vaccine Period
metadata_df <- data_frame
###
GPS_freq_table <- Generate_GPSC_Serotype_Vaccine_freqtable(metadata_df = metadata_df)
### plotting figure2
serotype_colorcode <- read.table("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/serotype__colours_patterns.csv",
sep = ",", comment.char = "&", header = TRUE)
### check the difference between the Serotype vectors in "GPS_freq_table" and "serotype_colorcode"
sero_diff <- setdiff(unique(GPS_freq_table$Serotype), unique(serotype_colorcode$Serotype))
GPS_freq_table_sero_code <- merge(GPS_freq_table, serotype_colorcode, by="Serotype")
## set target GPSCs
target_gpsc <- c("1", "2", "3", "4", "5", "6" ,"7", "8", "9", "10", "12", "13", "14", "15", "16", "18", "23", "26", "31",
"32", "37","38", "44","45", "47", "50","59", "61","69", "70", "95", "106","113", "122","152","162","386", "657")
GPS_freq_table_sero_code[which(!GPS_freq_table_sero_code$GPSC %in% target_gpsc), "GPSC"] <- "Others"
### set GPSC order
GPSC_order <- c(target_gpsc, "Others")
GPS_freq_table_sero_code$GPSC <- factor(GPS_freq_table_sero_code$GPSC, levels=GPSC_order)
### plot
filled_colours <- GPS_freq_table_sero_code$Serotype__colour
names(filled_colours) <- GPS_freq_table_sero_code$Serotype
filled_patterns <- GPS_freq_table_sero_code$ggpattern
names(filled_patterns) <- GPS_freq_table_sero_code$Vtype
### set vaccine period order
vaccine_period_order <- c("pre-PCV13", "post-PCV13")
GPS_freq_table_sero_code$Vaccine_Period <- factor(GPS_freq_table_sero_code$Vaccine_Period, levels=vaccine_period_order)
GPS_freq_table_plot <- ggplot(GPS_freq_table_sero_code, aes(x = Vaccine_Period, y = Proportion, fill=Serotype, pattern=Vtype)) + #fill=Serotype, pattern=Serotype
geom_bar_pattern(position = "stack", stat = "identity", pattern_density=0.2, pattern_spacing=0.2, pattern_key_scale_factor = 1.2) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 20),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
legend.text = element_text(size=20),
legend.title = element_text(size=25),
plot.caption = element_text(size=25))+
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
strip.text = element_text(size = 25),
panel.spacing = unit(-.01,"cm"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.key.size = unit(0.8, 'cm'))+
xlab("GPSC")+
ylim(c(0,0.3))+
facet_grid(~ GPSC, switch = "x") +
scale_fill_manual(values= filled_colours)+
scale_pattern_manual(values = filled_patterns, guide="none")+
labs(caption = "*Non-PCV13 Type are labeled with stripes")
png("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/GPS_freq_table_plot_TWN.png", width = 2500, height = 1000)
GPS_freq_table_plot
dev.off()
rm(list = ls())
sim_res<-readRDS("fits_to_study_adjusted_serotype_specific_poission_simulations.rds")
cd /Users/hc14/Documents/PhD_project/Invasiveness/Stan_Bayesian/simulation
setwd("/Users/hc14/Documents/PhD_project/Invasiveness/Stan_Bayesian/simulation")
sim_res<-readRDS("fits_to_study_adjusted_serotype_specific_poission_simulations.rds")
sim_res@par_dims$rho_ij
sim_res@par_dims$log_nu_j
sim_res@model_pars
as.numeric(rstan::summary(sim_res, pars=c("log_nu_j"))$summary[,1])
rstan::summary(sim_res, pars=c("log_nu_j")
)
as.numeric(rstan::summary(sim_res, pars=c("log_nu_j"))$summary[,"mean"])
as.numeric(rstan::summary(sim_res, pars=c("log_nu_j"))$summary
)
rstan::summary(sim_res, pars=c("log_nu_j"))$summary
setwd("/Users/hc14/Documents/PhD_project/Invasiveness/Stan_Bayesian/simulation")
library(tibble)
library(progressionEstimation)
library(rstan)
setwd("/Users/hc14/Documents/PhD_project/Invasiveness/Stan_Bayesian/simulation")
# ------------------------- Carriage Rate -------------------------------
'''
Prevalance / Carriage rate
All simulations use the same randomly-generated set of carriage prevalance (rho_ij) for different types different locations
'''
n_types <- 20
n_studies <- 20
# Simulate rho_ij
set.seed(284)
random_prevalance <- runif(n_types*n_studies, min = 0, max = 0.05) # 0.05 because there are 20 types (n_types * prevalance cannot exceed 1)
# generate table
carriage_prevalance <-
tibble(
"serotype" = factor(rep(paste0("Serotype_", 1:n_types), n_studies), levels = paste0("Serotype_", 1:n_types)),
"study" = factor(rep(paste0("Population_", LETTERS[1:n_studies]), each = n_types)),
"true_rho_ij" = random_prevalance
)
carriage_prevalance %>%
kableExtra::kable()  %>%
kableExtra::kable_styling(latex_options = "scale_down")
# ------------------------- Progression Rate -------------------------------
'''
The progresssion rates for the types (nu_j) are set to be vary by type
'''
set.seed(284)
random_progression_rates <- 10**(-1*runif(n_types, min = 1, max = 5))
progression_rates <-
tibble(
"serotype" = factor(paste0("Serotype_", 1:n_types), levels = paste0("Serotype_", 1:n_types)),
"true_nu_j" = random_progression_rates
)
progression_rates %>%
kableExtra::kable()  %>%
kableExtra::kable_styling(latex_options = "scale_down")
# ------------------------- Population Factor -------------------------------
'''
The population factors are randomly generated. To simulate different levels of disease surveillance between locations,
the (gamma_i) parameters were set such that the first location was used as the standard, reltative to which others varied
'''
# Sample size: n_i
set.seed(284)
n_i <- round(rnorm(n_studies, 1000, 250))
# Population size: N_i
set.seed(284)
N_i <- round(10**(runif(n_studies, min = 4, max = 6)))
# Population factor: r_i
set.seed(284)
random_r_i <- 10**rnorm(n_studies-1, mean = 0, sd=2)
random_r_i <- c(1, random_r_i) # first population factor is 1
population_factor <-
tibble(
"study" = factor(paste0("Population_", LETTERS[1:n_studies])),
"true_r_i" = random_r_i,
"carriage_samples" = n_i,
"surveillance_population" = N_i,
"time_interval" = 1
)
population_factor %>%
kableExtra::kable()  %>%
kableExtra::kable_styling(latex_options = "scale_down")
# ------------------------- Simulated dataframe -------------------------------
simulation_df <-
carriage_prevalance %>%
dplyr::left_join(progression_rates, by=c("serotype")) %>%
dplyr::left_join(population_factor, by=c("study"))
# ------------------------- Serotype-specific_model -------------------------------
## generate simulated observed data
Serotype_specific_poisson_simulation_df <-
simulation_df %>%
dplyr::rowwise() %>%
dplyr::mutate(carriage = rbinom(1, carriage_samples, prob = true_rho_ij)) %>%
dplyr::mutate(disease = rpois(1, surveillance_population*true_rho_ij*time_interval*true_nu_j*true_r_i)) %>%
dplyr::ungroup()
## making into a list for BIM
Serotype_specific_poisson_simulation_BIM_df <-
progressionEstimation::process_input_data(Serotype_specific_poisson_simulation_df, type = "serotype")
head(Serotype_specific_poisson_simulation_BIM_df)
head(Serotype_specific_poisson_simulation_df)
input_df <- Serotype_specific_poisson_simulation_df
i_levels = levels(input_df %>% dplyr::pull(study))
j_levels = levels(input_df %>% dplyr::pull(!!type))
j_levels = levels(input_df %>% dplyr::pull(!!serotype))
head(input_df)
head(input_df)
colnames(input_df)
j_levels = levels(input_df %>% dplyr::pull(!!serotype))
input_df %>% dplyr::pull(!!serotype)
i_levels
levels(input_df %>% dplyr::pull(serotype))
i_levels = levels(input_df %>% dplyr::pull(study))
j_levels = levels(input_df %>% dplyr::pull(serotype))
model_output <- sim_res
carriage_df <- data.frame(
"rho" = get_median("rho_ij",model_output),
"rho_lower" = get_lower("rho_ij",model_output),
"rho_upper" = get_upper("rho_ij",model_output)
)
get_mean<-function(parameter,model) {
return(as.numeric(rstan::summary(model,pars=c(parameter))$summary[,"mean"]))
}
get_upper<-function(parameter,model) {
return(as.numeric(rstan::summary(model,pars=c(parameter))$summary[,"97.5%"]))
}
get_lower<-function(parameter,model) {
return(as.numeric(rstan::summary(model,pars=c(parameter))$summary[,"2.5%"]))
}
get_median<-function(parameter,model) {
return(as.numeric(rstan::summary(model,pars=c(parameter))$summary[,"50%"]))
}
carriage_df <- data.frame(
"rho" = get_median("rho_ij",model_output),
"rho_lower" = get_lower("rho_ij",model_output),
"rho_upper" = get_upper("rho_ij",model_output)
)
location_parameters <- data.frame(
"study" = i_levels,
"gamma" = get_median("gamma_i",model_output),
"gamma_lower" = get_lower("gamma_i",model_output),
"gamma_upper" = get_upper("gamma_i",model_output)
)
progression_rates_df <- data.frame(
"type" = j_levels,
"nu" = as.numeric(get_median(nu_name,model_output)),
"nu_lower" = as.numeric(get_lower(nu_name,model_output)),
"nu_upper" = as.numeric(get_upper(nu_name,model_output))
)
progression_rates_df <- data.frame(
"type" = j_levels,
"log_nu" = as.numeric(get_median(nu_name,model_output)),
"log_nu_lower" = as.numeric(get_lower(nu_name,model_output)),
"log_nu_upper" = as.numeric(get_upper(nu_name,model_output))
)
nu_name <- "nu_j"
progression_rates_df <- data.frame(
"type" = j_levels,
"nu" = as.numeric(get_median(nu_name,model_output)),
"nu_lower" = as.numeric(get_lower(nu_name,model_output)),
"nu_upper" = as.numeric(get_upper(nu_name,model_output))
)
head(progression_rates_df)
head(progression_rates)
merge(progression_rates, progression_rates_df)
help("merge")
head(progression_rates)
merge(progression_rates, progression_rates_df, by.x = "serotype", by.y = "type")
obs_pred_prate <- merge(progression_rates, progression_rates_df, by.x = "serotype", by.y = "type")
head(population_factor)
head(population_factor)
obs_pred_rrate <- merge(population_factor,location_parameters, by.x="study", by.y = "study")
head(carriage_prevalance)
head(carriage_df)
carriage_df <- data.frame(
"study" = i_levels
"type" = j_levels
"rho" = get_median("rho_ij",model_output),
"rho_lower" = get_lower("rho_ij",model_output),
"rho_upper" = get_upper("rho_ij",model_output)
)
head(obs_pred_prate)
prate_plot <-
ggplot(obs_pred_prate,
aes(x = true_nu_j,
y = nu,
ymin = nu_lower,
ymax =nu_upper)) +
geom_abline(slope = 1, intercept = 0, lty = 2, colour = "coral") +
ylab("Predicted disease isolates") +
xlab("Observed disease isolates") +
theme_bw()
prate_plot
ggplot(obs_pred_prate,
aes(x = true_nu_j,
y = nu,
ymin = nu_lower,
ymax =nu_upper))
ggplot(obs_pred_prate,
aes(x = true_nu_j,
y = nu,
ymin = nu_lower,
ymax =nu_upper))
ggplot(obs_pred_prate, aes(x=true_nu_j, y=nu)) + geom_point()
ggplot(obs_pred_prate, aes(x=true_nu_j, y=nu,ymin = nu_lower,
ymax =nu_upper)) + geom_point()
